---
- hosts: localhost
  vars:
    project_root: "{{ playbook_dir }}/../../../.."
    kubelet_location: "https://dl.k8s.io/v1.14.0/kubernetes-node-windows-amd64.tar.gz"
    wmcb_exe: "wmcb.exe"

  tasks:
    - name: Gather required files
      block:

        - name: Create directory to store files to be used later
          tempfile:
            state: directory
          register: tmp_dir

        - name: Build WMCB
          make:
            target: build
            chdir: "{{ project_root }}"

        - name: Move WMCB to temporary directory
          command: mv "{{ project_root }}/{{ wmcb_exe }}" "{{ tmp_dir.path }}/{{ wmcb_exe }}"

        - name: Download Windows node kubelet
          get_url:
            url: "{{ kubelet_location }}"
            dest: "{{ tmp_dir.path }}/kube.tar.gz"

        - name: Extract kubelet
          unarchive:
            src: "{{ tmp_dir.path }}/kube.tar.gz"
            dest: "{{ tmp_dir.path }}"

        - name: Grab kubelet from extracted directories
          copy:
            src: "{{ tmp_dir.path }}/kubernetes/node/bin/kubelet.exe"
            dest: "{{ tmp_dir.path }}/kubelet.exe"

- hosts: win
  vars:
    tmp_path: "{{ playbook_dir }}/tmp"

  tasks:
    - name: Create temporary directory
      win_tempfile:
        state: directory
      register: win_temp_dir
    - name: Copy required files to Windows host
      win_copy:
        src: "{{ hostvars['localhost']['tmp_dir']['path'] }}/"
        dest: "{{ win_temp_dir.path }}"

    - name: Get ignition file
      win_get_url:
        url: "https://api-int.{{ cluster_address }}:22623/config/worker"
        dest: "{{ win_temp_dir.path }}\\worker.ign"
        validate_certs: no

    - name: Run bootstrapper
      win_shell: "{{ win_temp_dir.path }}\\wmcb.exe initialize-kubelet --ignition-file {{ win_temp_dir.path }}\\worker.ign --kubelet-path {{ win_temp_dir.path }}\\kubelet.exe"
      register: bootstrap_out

    - name: Check if bootstrap was successful
      fail:
        msg: "Bootstrapper error"
      when: '"Bootstrapping completed successfully" not in bootstrap_out.stderr'

    - name: Initial wait for bootstrap CSR
      pause:
        seconds: 60

    - name: Check for bootstrap CSR
      shell: "oc get csr | awk '/system:serviceaccount:openshift-machine-config-operator:node-bootstrapper/ && /Pending/ {print $1}'"
      register: bootstrap_csrs
      until: bootstrap_csrs.stdout != ""
      retries: 2
      delay: 60

    - name: Approve pending bootstrap CSRs
      delegate_to: localhost
      shell: "oc adm certificate approve {{ item }}"
      with_items: "{{ bootstrap_csrs.stdout_lines }}"

    - name: Initial wait for node CSR
      pause:
        seconds: 60

    - name: Wait for node CSR
      shell: "oc get csr | awk '/system:node:/ && /Pending/ {print $1}'"
      register: node_csrs
      until: node_csrs.stdout != ""
      retries: 2
      delay: 60

    - name: Approve pending node CSRs
      delegate_to: localhost
      shell: "oc adm certificate approve {{ item }}"
      with_items: "{{ node_csrs.stdout_lines }}"
