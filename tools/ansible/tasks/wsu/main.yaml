---
- hosts: localhost
  vars:
    project_root: "{{ playbook_dir }}/../../../.."
    kubelet_location: "https://dl.k8s.io/v1.16.2/kubernetes-node-windows-amd64.tar.gz"
    hybrid_overlay_location: "https://github.com/openshift/windows-machine-config-operator/releases/download/0.1/hybrid-overlay.exe"
    cni_location: "https://github.com/containernetworking/plugins/releases/download/v0.8.2/cni-plugins-windows-amd64-v0.8.2.tgz"
    wmcb_exe: "wmcb.exe"

  tasks:
    - name: Gather required files
      block:

        - name: Create directory to store files to be used later
          tempfile:
            state: directory
          register: tmp_dir

        - name: Create directory to store cni binaries to be used later
          tempfile:
            state: directory
          register: tmp_cnidir

        - name: Build WMCB
          make:
            target: build
            chdir: "{{ project_root }}"

        - name: Move WMCB to temporary directory
          command: mv "{{ project_root }}/{{ wmcb_exe }}" "{{ tmp_dir.path }}/{{ wmcb_exe }}"

        - name: Download Windows node kubelet
          get_url:
            url: "{{ kubelet_location }}"
            dest: "{{ tmp_dir.path }}/kube.tar.gz"

        - name: Extract kubelet
          unarchive:
            src: "{{ tmp_dir.path }}/kube.tar.gz"
            dest: "{{ tmp_dir.path }}"

        - name: Grab kubelet from extracted directories
          copy:
            src: "{{ tmp_dir.path }}/kubernetes/node/bin/kubelet.exe"
            dest: "{{ tmp_dir.path }}/kubelet.exe"


        # Transfer the hybrid-overlay binary to the Windows node
        - name: Transfer hybrid-overlay to the Windows node
          get_url:
            url: "{{ hybrid_overlay_location }}"
            dest: "{{ tmp_cnidir.path }}/hybrid_overlay.exe"

        # Download the required cni binaries
        - name: Download cni binaries
          get_url:
            url: "{{ cni_location }}"
            dest: "{{ tmp_cnidir.path }}/cni.tar.gz"

        # Extract cni binaries
        - name: Extract cni binaries
          unarchive:
            src: "{{ tmp_cnidir.path }}/cni.tar.gz"
            dest: "{{ tmp_cnidir.path }}"

        # Transfer cni config file. Ideally this should be generated for each node.
        # TODO: Have a template for each node and transfer the node.
        - name: Transfer the cni config file
          copy:
            src: "cni.conf"
            dest: "{{ tmp_cnidir.path }}/cni.conf"

- hosts: win
  vars:
    tmp_path: "{{ playbook_dir }}/tmp"

  tasks:
    - name: Create temporary directory
      win_tempfile:
        state: directory
      register: win_temp_dir

    - name: Create cni temporary directory
      win_tempfile:
        state: directory
      register: win_temp_cni_dir

    - name: Copy required files to Windows host
      win_copy:
        src: "{{ hostvars['localhost']['tmp_dir']['path'] }}/"
        dest: "{{ win_temp_dir.path }}"

    - name: Copy cni files to the Windows host
      win_copy:
        src: "{{ hostvars['localhost']['tmp_cnidir']['path'] }}/"
        dest: "{{ win_temp_cni_dir.path }}"

    - name: Get ignition file
      win_get_url:
        url: "https://api-int.{{ cluster_address }}:22623/config/worker"
        dest: "{{ win_temp_dir.path }}\\worker.ign"
        validate_certs: no

    - name: Run bootstrapper
      win_shell: "{{ win_temp_dir.path }}\\wmcb.exe initialize-kubelet --ignition-file {{ win_temp_dir.path }}\\worker.ign --kubelet-path {{ win_temp_dir.path }}\\kubelet.exe"
      register: bootstrap_out

    - name: Check if bootstrap was successful
      fail:
        msg: "Bootstrapper error"
      when: '"Bootstrapping completed successfully" not in bootstrap_out.stderr'

    - name: Initial wait for bootstrap CSR
      pause:
        seconds: 60

    - name: Check for bootstrap CSR
      delegate_to: localhost
      shell: "oc get csr | awk '/system:serviceaccount:openshift-machine-config-operator:node-bootstrapper/ && /Pending/ {print $1}'"
      register: bootstrap_csrs
      until: bootstrap_csrs.stdout != ""
      retries: 2
      delay: 60

    - name: Approve pending bootstrap CSRs
      delegate_to: localhost
      shell: "oc adm certificate approve {{ item }}"
      with_items: "{{ bootstrap_csrs.stdout_lines }}"

    - name: Initial wait for node CSR
      pause:
        seconds: 60

    - name: Wait for node CSR
      delegate_to: localhost
      shell: "oc get csr | awk '/system:node:/ && /Pending/ {print $1}'"
      register: node_csrs
      until: node_csrs.stdout != ""
      retries: 2
      delay: 60

    - name: Approve pending node CSRs
      delegate_to: localhost
      shell: "oc adm certificate approve {{ item }}"
      with_items: "{{ node_csrs.stdout_lines }}"

    # Assuming bootstrap has been run, get all the Windows node bootstrapped via WMCB which have no worker labels.
    - name: Get all the Windows node bootstrapped via WMCB without worker labels
      delegate_to: localhost
      shell: "oc get nodes -l 'node.openshift.io/os_id=Windows, !node-role.kubernetes.io/worker' -o name"
      register: windows_nodes_without_worker_labels

    # Apply worker label to the Windows nodes bootstrapped via WMCB
    - name: Label all the Windows nodes without worker labels
      delegate_to: localhost
      shell: "oc label {{ item }} node-role.kubernetes.io/worker="
      with_items: "{{ windows_nodes_without_worker_labels.stdout_lines }}"

    - name: Run hybrid overlay
      win_shell: "Start-Process -NoNewWindow -FilePath \"{{ win_temp_cni_dir }}\\hybrid_overlay.exe\" -ArgumentList \"--node  {{ item | replace('node/', '') }} --k8s-kubeconfig c:\\k\\kubeconfig""
      with_items: "{{ windows_nodes_without_worker_labels.stdout_lines }}"
      async: 60
      poll: 0

    - name: Wait for OpenShift HNS network
      pause:
        seconds: 60

    - name: Run WMCB cni config
      win_shell: "{{ win_temp_dir.path }}\\wmcb.exe configure-cni --cni-path {{ win_temp_cni_dir.path }} --cni-config {{ win_temp_cni_dir.path }}\\cni.conf"
      register: bootstrap_out
